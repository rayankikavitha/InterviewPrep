Round 1)
Conversion for 4 events ( open a session, upload photo, comment, finish)
If a product manager asks you , how can you improve the process, what can you improve?
a) calculate the average time it takes one step to another step across all sessions.
  duration = from step 1 to first occurence of the following step.
  So, after step 1, step 2 can happen multiple times, but you calculate the difference with first occurence.

b) ratio of open events moving to finish step.
c) Do the same thing in python

session id, user_id, step_id, timestamp

x1, 101, 1, 20
x1 , 101, 2, 22
x1, 101, 2, 23
x1, 101, 4, 25
x1, 101, 3, 26 

x2, 101, 1, 30
x2, 101, 2, 32
x2, 101, 1, 33

Round 2)

Vikas

1) when the monthly active users count decreases or increases how do you investigate
 - Specifically looking for population metrics, how do you narrow down to the missing/increasing population

2) How do you calculate L7 ( given a input like this ?

input = { "android":[1,1,0,0,0,1,0] ,
              "ios":[1,0,1,1,0,0,1],
           "laptop":[0,0,0,0,1,1,0]
       }

 category = {. "mobile": ["ios","android"]
               ,everything = ["ios","android","laptop"]

 }

 output = { "mobile ": [1,1,1,1,0,1,1,], everything :[1,1,1,1,1,1,1]
       }


3) SQL  using outer join make sure use coalescue

how to derive these poeple from the below table

ac - active user
churn 
retention - comeing back but who didn't visit yesterday
first time user

users_time

date, user_id, first_ts, last_ts, prev_latest_ts
1/1		1        1/1	   1/1.     -        - first time user
1/2   1        1/1        1/2       1/1      - 
1/3.  2         1/1/2015    1/3        1/1   < retention record ( last_ts, prev_last_ts diff is less than 1)
1/4.  3	 		1/1/2014.   1/1/2015.    12/01/2014.   <- churn. ( more than 1 day)

How do identify a user is active user , churn, retention, first time user by using the above tab

select date
    , case when prev_latest_ts is null then 'first_time_user'
       when last_ts - prev_latest_ts = 1   then 'active_user'
       when last_ts - prev_latest_ts = 2 then 'retention_user'
       when last_ts - prev_latest_ts > 2 then 'churn'
      end as user_type
from timestamp_table;


select date
     , count(case when prev_latest_ts is Null then 1 else 0 end ) as total_first_time_users 

     , 

from     users_time
group by date
; 

4) given an another table log where 

daily_log
user_id logging_Date
1     1/1
2.    1/2

how do you update users_time? write a query to insert the next line in the row.

you have to look at the previous rows, to derive first_ts, prev_latest_ts

select date,
    , coalescu( prev)

from daily_log   d
outer join users_time   u
on  u.user_id = d.user_id



Round 3)

1_ uber/lyft car riding services.
  Talk about a advantages and disadvantages of having a single dimension for riders and drivers.

   fact is trip, grain is daily

   dimensions -> riders, drivers, time ,location, vehicle

   sql questions

   1) average wait time per day for the rider per week
   2) people who used uber only for airport ( either pickup or dropoff)
   3) count the number of people who drove from specific zipcode. 
     A-> B is counted 1 for A
     B -> A is counted 1  for A
     A-> A should be counted 1  for A
   4) no. of peoole who used uber for airport per week.
   5) no.of drivers who drove more than 4 hours per week ( including gaps )

   Table:

   trip id, driver_id, rider_id, pickup_loc_id, dropoff_loc_id,fare




Feedback and thoughts:

1) first round was ok, remaining 2 rounds improve SQL and Python, behavior was ok.
2)  My reflection:
   1) on behavior, elaborate on kohl's marketing strategy : you could have elaborated more
   2) case statements practice.
   3) when doing outer joins, use coalease for missing values to catch NULLs.
3) Demensional modelling 


Important book mark links:







